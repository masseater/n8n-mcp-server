/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate an audit
         * @description Generate a security audit for your n8n instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        additionalOptions?: {
                            /** @description Days for a workflow to be considered abandoned if not executed */
                            daysAbandonedWorkflow?: number;
                            categories?: ("credentials" | "database" | "nodes" | "filesystem" | "instance")[];
                        };
                    };
                };
            };
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["audit"];
                    };
                };
                401: components["responses"]["unauthorized"];
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a credential
         * @description Creates a credential that can be used by nodes of the specified type.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Credential to be created. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["credential"];
                };
            };
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["create-credential-response"];
                    };
                };
                401: components["responses"]["unauthorized"];
                /** @description Unsupported media type. */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credentials/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete credential by ID
         * @description Deletes a credential from your instance. You must be the owner of the credentials
         */
        delete: operations["deleteCredential"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credentials/schema/{credentialTypeName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show credential data schema */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The credential type name that you want to get the schema for */
                    credentialTypeName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credentials/{id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Transfer a credential to another project.
         * @description Transfer a credential to another project.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the credential. */
                    id: components["parameters"]["credentialId"];
                };
                cookie?: never;
            };
            /** @description Destination project for the credential transfer. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The ID of the project to transfer the credential to. */
                        destinationProjectId: string;
                    };
                };
            };
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/executions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all executions
         * @description Retrieve all executions from your instance.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Whether or not to include the execution's detailed data. */
                    includeData?: components["parameters"]["includeData"];
                    /** @description Status to filter the executions by. */
                    status?: "canceled" | "error" | "running" | "success" | "waiting";
                    /** @description Workflow to filter the executions by. */
                    workflowId?: string;
                    projectId?: string;
                    /** @description The maximum number of items to return. */
                    limit?: components["parameters"]["limit"];
                    /** @description Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail. */
                    cursor?: components["parameters"]["cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["executionList"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/executions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an execution
         * @description Retrieve an execution from your instance.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Whether or not to include the execution's detailed data. */
                    includeData?: components["parameters"]["includeData"];
                };
                header?: never;
                path: {
                    /** @description The ID of the execution. */
                    id: components["parameters"]["executionId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["execution"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete an execution
         * @description Deletes an execution from your instance.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the execution. */
                    id: components["parameters"]["executionId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["execution"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/executions/{id}/retry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retry an execution
         * @description Retry an execution from your instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the execution. */
                    id: components["parameters"]["executionId"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Whether to load the currently saved workflow to execute instead of the one saved at the time of the execution. If set to true, it will retry with the latest version of the workflow. */
                        loadWorkflow?: boolean;
                    };
                };
            };
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["execution"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
                409: components["responses"]["conflict"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all tags
         * @description Retrieve all tags from your instance.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The maximum number of items to return. */
                    limit?: components["parameters"]["limit"];
                    /** @description Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail. */
                    cursor?: components["parameters"]["cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tagList"];
                    };
                };
                401: components["responses"]["unauthorized"];
            };
        };
        put?: never;
        /**
         * Create a tag
         * @description Create a tag in your instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Created tag object. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            responses: {
                /** @description A tag object */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag"];
                    };
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                409: components["responses"]["conflict"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a tag
         * @description Retrieves a tag.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the tag. */
                    id: components["parameters"]["tagId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        /**
         * Update a tag
         * @description Update a tag.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the tag. */
                    id: components["parameters"]["tagId"];
                };
                cookie?: never;
            };
            /** @description Updated tag object. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            responses: {
                /** @description Tag object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag"];
                    };
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
                409: components["responses"]["conflict"];
            };
        };
        post?: never;
        /**
         * Delete a tag
         * @description Deletes a tag.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the tag. */
                    id: components["parameters"]["tagId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag"];
                    };
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all workflows
         * @description Retrieve all workflows from your instance.
         */
        get: {
            parameters: {
                query?: {
                    active?: boolean;
                    tags?: string;
                    name?: string;
                    projectId?: string;
                    /** @description Set this to avoid retrieving pinned data */
                    excludePinnedData?: boolean;
                    /** @description The maximum number of items to return. */
                    limit?: components["parameters"]["limit"];
                    /** @description Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail. */
                    cursor?: components["parameters"]["cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflowList"];
                    };
                };
                401: components["responses"]["unauthorized"];
            };
        };
        put?: never;
        /**
         * Create a workflow
         * @description Create a workflow in your instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Created workflow object. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["workflow"];
                };
            };
            responses: {
                /** @description A workflow object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflow"];
                    };
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a workflow
         * @description Retrieves a workflow.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Set this to avoid retrieving pinned data */
                    excludePinnedData?: boolean;
                };
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflow"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        /**
         * Update a workflow
         * @description Update a workflow.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            /** @description Updated workflow object. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["workflow"];
                };
            };
            responses: {
                /** @description Workflow object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflow"];
                    };
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        post?: never;
        /**
         * Delete a workflow
         * @description Deletes a workflow.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflow"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a workflow
         * @description Active a workflow.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Workflow object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflow"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a workflow
         * @description Deactivate a workflow.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Workflow object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflow"];
                    };
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Transfer a workflow to another project.
         * @description Transfer a workflow to another project.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            /** @description Destination project information for the workflow transfer. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The ID of the project to transfer the workflow to. */
                        destinationProjectId: string;
                    };
                };
            };
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workflow tags
         * @description Get workflow tags.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of tags */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflowTags"];
                    };
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        /**
         * Update tags of a workflow
         * @description Update tags of a workflow.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the workflow. */
                    id: components["parameters"]["workflowId"];
                };
                cookie?: never;
            };
            /** @description List of tags */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["tagIds"];
                };
            };
            responses: {
                /** @description List of tags after add the tag */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workflowTags"];
                    };
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all users
         * @description Retrieve all users from your instance. Only available for the instance owner.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The maximum number of items to return. */
                    limit?: components["parameters"]["limit"];
                    /** @description Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail. */
                    cursor?: components["parameters"]["cursor"];
                    /** @description Whether to include the user's role or not. */
                    includeRole?: components["parameters"]["includeRole"];
                    projectId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["userList"];
                    };
                };
                401: components["responses"]["unauthorized"];
            };
        };
        put?: never;
        /**
         * Create multiple users
         * @description Create one or more users.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Array of users to be created. */
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        /** @example global:member */
                        role?: string;
                    }[];
                };
            };
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: {
                                id?: string;
                                email?: string;
                                inviteAcceptUrl?: string;
                                emailSent?: boolean;
                            };
                            error?: string;
                        };
                    };
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID/Email
         * @description Retrieve a user from your instance. Only available for the instance owner.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Whether to include the user's role or not. */
                    includeRole?: components["parameters"]["includeRole"];
                };
                header?: never;
                path: {
                    /** @description The ID or email of the user. */
                    id: components["parameters"]["userIdentifier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user"];
                    };
                };
                401: components["responses"]["unauthorized"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a user
         * @description Delete a user from your instance.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID or email of the user. */
                    id: components["parameters"]["userIdentifier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change a user's global role
         * @description Change a user's global role
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID or email of the user. */
                    id: components["parameters"]["userIdentifier"];
                };
                cookie?: never;
            };
            /** @description New role for the user */
            requestBody: {
                content: {
                    "application/json": {
                        /** @example global:member */
                        newRoleName: string;
                    };
                };
            };
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        trace?: never;
    };
    "/source-control/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pull changes from the remote repository
         * @description Requires the Source Control feature to be licensed and connected to a repository.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Pull options */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["pull"];
                };
            };
            responses: {
                /** @description Import result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["importResult"];
                    };
                };
                400: components["responses"]["badRequest"];
                409: components["responses"]["conflict"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve variables
         * @description Retrieve variables from your instance.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The maximum number of items to return. */
                    limit?: components["parameters"]["limit"];
                    /** @description Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail. */
                    cursor?: components["parameters"]["cursor"];
                    projectId?: string;
                    state?: "empty";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["variableList"];
                    };
                };
                401: components["responses"]["unauthorized"];
            };
        };
        put?: never;
        /**
         * Create a variable
         * @description Create a variable in your instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Payload for variable to create. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["variable.create"];
                };
            };
            responses: {
                /** @description Operation successful. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/variables/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a variable
         * @description Update a variable from your instance.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the variable. */
                    id: components["parameters"]["variableId"];
                };
                cookie?: never;
            };
            /** @description Payload for variable to update. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["variable.create"];
                };
            };
            responses: {
                /** @description Operation successful. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        post?: never;
        /**
         * Delete a variable
         * @description Delete a variable from your instance.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the variable. */
                    id: components["parameters"]["variableId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["unauthorized"];
                404: components["responses"]["notFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve projects
         * @description Retrieve projects from your instance.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The maximum number of items to return. */
                    limit?: components["parameters"]["limit"];
                    /** @description Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail. */
                    cursor?: components["parameters"]["cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["projectList"];
                    };
                };
                401: components["responses"]["unauthorized"];
            };
        };
        put?: never;
        /**
         * Create a project
         * @description Create a project on your instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Payload for project to create. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["project"];
                };
            };
            responses: {
                /** @description Operation successful. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a project
         * @description Update a project on your instance.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the project. */
                    projectId: string;
                };
                cookie?: never;
            };
            /** @description Updated project object. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["project"];
                };
            };
            responses: {
                /** @description Operation successful. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["badRequest"];
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        post?: never;
        /**
         * Delete a project
         * @description Delete a project from your instance.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the project. */
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{projectId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add one or more users to a project
         * @description Add one or more users to a project on your instance.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the project. */
                    projectId: string;
                };
                cookie?: never;
            };
            /** @description Payload containing an array of one or more users to add to the project. */
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description A list of userIds and roles to add to the project. */
                        relations: {
                            /**
                             * @description The unique identifier of the user.
                             * @example 91765f0d-3b29-45df-adb9-35b23937eb92
                             */
                            userId: string;
                            /**
                             * @description The role assigned to the user in the project.
                             * @example project:viewer
                             */
                            role: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Operation successful. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{projectId}/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a user from a project
         * @description Delete a user from a project on your instance.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the project. */
                    projectId: string;
                    /** @description The ID of the user. */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation successful. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Change a user's role in a project
         * @description Change a user's role in a project.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the project. */
                    projectId: string;
                    /** @description The ID of the user. */
                    userId: string;
                };
                cookie?: never;
            };
            /** @description Payload containing the new role to assign to the project user. */
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The role assigned to the user in the project.
                         * @example project:viewer
                         */
                        role: string;
                    };
                };
            };
            responses: {
                /** @description Operation successful. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["unauthorized"];
                403: components["responses"]["forbidden"];
                404: components["responses"]["notFound"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        audit: {
            /**
             * @example {
             *       "risk": "credentials",
             *       "sections": [
             *         {
             *           "title": "Credentials not used in any workflow",
             *           "description": "These credentials are not used in any workflow. Keeping unused credentials in your instance is an unneeded security risk.",
             *           "recommendation": "Consider deleting these credentials if you no longer need them.",
             *           "location": [
             *             {
             *               "kind": "credential",
             *               "id": "1",
             *               "name": "My Test Account"
             *             }
             *           ]
             *         }
             *       ]
             *     }
             */
            "Credentials Risk Report"?: Record<string, never>;
            /**
             * @example {
             *       "risk": "database",
             *       "sections": [
             *         {
             *           "title": "Expressions in \"Execute Query\" fields in SQL nodes",
             *           "description": "This SQL node has an expression in the \"Query\" field of an \"Execute Query\" operation. Building a SQL query with an expression may lead to a SQL injection attack.",
             *           "recommendation": "Consider using the \"Query Parameters\" field to pass parameters to the query",
             *           "or validating the input of the expression in the \"Query\" field.": null,
             *           "location": [
             *             {
             *               "kind": "node",
             *               "workflowId": "1",
             *               "workflowName": "My Workflow",
             *               "nodeId": "51eb5852-ce0b-4806-b4ff-e41322a4041a",
             *               "nodeName": "MySQL",
             *               "nodeType": "n8n-nodes-base.mySql"
             *             }
             *           ]
             *         }
             *       ]
             *     }
             */
            "Database Risk Report"?: Record<string, never>;
            /**
             * @example {
             *       "risk": "filesystem",
             *       "sections": [
             *         {
             *           "title": "Nodes that interact with the filesystem",
             *           "description": "This node reads from and writes to any accessible file in the host filesystem. Sensitive file content may be manipulated through a node operation.",
             *           "recommendation": "Consider protecting any sensitive files in the host filesystem",
             *           "or refactoring the workflow so that it does not require host filesystem interaction.": null,
             *           "location": [
             *             {
             *               "kind": "node",
             *               "workflowId": "1",
             *               "workflowName": "My Workflow",
             *               "nodeId": "51eb5852-ce0b-4806-b4ff-e41322a4041a",
             *               "nodeName": "Ready Binary file",
             *               "nodeType": "n8n-nodes-base.readBinaryFile"
             *             }
             *           ]
             *         }
             *       ]
             *     }
             */
            "Filesystem Risk Report"?: Record<string, never>;
            /**
             * @example {
             *       "risk": "nodes",
             *       "sections": [
             *         {
             *           "title": "Community nodes",
             *           "description": "This node is sourced from the community. Community nodes are not vetted by the n8n team and have full access to the host system.",
             *           "recommendation": "Consider reviewing the source code in any community nodes installed in this n8n instance",
             *           "and uninstalling any community nodes no longer used.": null,
             *           "location": [
             *             {
             *               "kind": "community",
             *               "nodeType": "n8n-nodes-test.test",
             *               "packageUrl": "https://www.npmjs.com/package/n8n-nodes-test"
             *             }
             *           ]
             *         }
             *       ]
             *     }
             */
            "Nodes Risk Report"?: Record<string, never>;
            /**
             * @example {
             *       "risk": "execution",
             *       "sections": [
             *         {
             *           "title": "Unprotected webhooks in instance",
             *           "description": "These webhook nodes have the \"Authentication\" field set to \"None\" and are not directly connected to a node to validate the payload. Every unprotected webhook allows your workflow to be called by any third party who knows the webhook URL.",
             *           "recommendation": "Consider setting the \"Authentication\" field to an option other than \"None\"",
             *           "or validating the payload with one of the following nodes.": null,
             *           "location": [
             *             {
             *               "kind": "community",
             *               "nodeType": "n8n-nodes-test.test",
             *               "packageUrl": "https://www.npmjs.com/package/n8n-nodes-test"
             *             }
             *           ]
             *         }
             *       ]
             *     }
             */
            "Instance Risk Report"?: Record<string, never>;
        };
        credential: {
            /** @example R2DjclaysHbqn778 */
            readonly id?: string;
            /** @example Joe's Github Credentials */
            name: string;
            /** @example github */
            type: string;
            /**
             * @example {
             *       "token": "ada612vad6fa5df4adf5a5dsf4389adsf76da7s"
             *     }
             */
            data: Record<string, never>;
            /**
             * Format: date-time
             * @example 2022-04-29T11:02:29.842Z
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @example 2022-04-29T11:02:29.842Z
             */
            readonly updatedAt?: string;
        };
        "create-credential-response": {
            /** @example vHxaz5UaCghVYl9C */
            readonly id: string;
            /** @example John's Github account */
            name: string;
            /** @example github */
            type: string;
            /**
             * Format: date-time
             * @example 2022-04-29T11:02:29.842Z
             */
            readonly createdAt: string;
            /**
             * Format: date-time
             * @example 2022-04-29T11:02:29.842Z
             */
            readonly updatedAt: string;
        };
        execution: {
            /** @example 1000 */
            id?: number;
            data?: Record<string, never>;
            /** @example true */
            finished?: boolean;
            /** @enum {string} */
            mode?: "cli" | "error" | "integrated" | "internal" | "manual" | "retry" | "trigger" | "webhook";
            retryOf?: number | null;
            /** @example 2 */
            retrySuccessId?: number | null;
            /** Format: date-time */
            startedAt?: string;
            /**
             * Format: date-time
             * @description The time at which the execution stopped. Will only be null for executions that still have the status 'running'.
             */
            stoppedAt?: string | null;
            /** @example 1000 */
            workflowId?: number;
            /** Format: date-time */
            waitTill?: string | null;
            customData?: Record<string, never>;
            /** @enum {string} */
            status?: "canceled" | "crashed" | "error" | "new" | "running" | "success" | "unknown" | "waiting";
        };
        executionList: {
            data?: components["schemas"]["execution"][];
            /**
             * @description Paginate through executions by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
             * @example MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA
             */
            nextCursor?: string | null;
        };
        tag: {
            /** @example 2tUt1wbLX592XDdX */
            readonly id?: string;
            /** @example Production */
            name: string;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        tagList: {
            data?: components["schemas"]["tag"][];
            /**
             * @description Paginate through tags by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
             * @example MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA
             */
            nextCursor?: string | null;
        };
        node: {
            /** @example 0f5532f9-36ba-4bef-86c7-30d607400b15 */
            id?: string;
            /** @example Jira */
            name?: string;
            webhookId?: string;
            disabled?: boolean;
            notesInFlow?: boolean;
            notes?: string;
            /** @example n8n-nodes-base.jira */
            type?: string;
            /** @example 1 */
            typeVersion?: number;
            /** @example false */
            executeOnce?: boolean;
            /** @example false */
            alwaysOutputData?: boolean;
            /** @example false */
            retryOnFail?: boolean;
            maxTries?: number;
            waitBetweenTries?: number;
            /**
             * @deprecated
             * @description use onError instead
             * @example false
             */
            continueOnFail?: boolean;
            /** @example stopWorkflow */
            onError?: string;
            /**
             * @example [
             *       -100,
             *       80
             *     ]
             */
            position?: number[];
            /**
             * @example {
             *       "additionalProperties": {}
             *     }
             */
            parameters?: Record<string, never>;
            /**
             * @example {
             *       "jiraSoftwareCloudApi": {
             *         "id": "35",
             *         "name": "jiraApi"
             *       }
             *     }
             */
            credentials?: Record<string, never>;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        workflowSettings: {
            saveExecutionProgress?: boolean;
            saveManualExecutions?: boolean;
            /** @enum {string} */
            saveDataErrorExecution?: "all" | "none";
            /** @enum {string} */
            saveDataSuccessExecution?: "all" | "none";
            /** @example 3600 */
            executionTimeout?: number;
            /**
             * @description The ID of the workflow that contains the error trigger node.
             * @example VzqKEW0ShTXA5vPj
             */
            errorWorkflow?: string;
            /** @example America/New_York */
            timezone?: string;
            /** @example v1 */
            executionOrder?: string;
        };
        sharedWorkflow: {
            /** @example workflow:owner */
            role?: string;
            /** @example 2tUt1wbLX592XDdX */
            workflowId?: string;
            /** @example 2tUt1wbLX592XDdX */
            projectId?: string;
            project?: {
                readonly id?: string;
                name?: string;
                readonly type?: string;
            };
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        workflow: {
            /** @example 2tUt1wbLX592XDdX */
            readonly id?: string;
            /** @example Workflow 1 */
            name: string;
            readonly active?: boolean;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
            nodes: components["schemas"]["node"][];
            /**
             * @example {
             *       "Jira": {
             *         "main": [
             *           [
             *             {
             *               "node": "Jira",
             *               "type": "main",
             *               "index": 0
             *             }
             *           ]
             *         ]
             *       }
             *     }
             */
            connections: Record<string, never>;
            settings: components["schemas"]["workflowSettings"];
            /**
             * @example {
             *       "lastId": 1
             *     }
             */
            staticData?: (string | null) | (Record<string, never> | null);
            readonly tags?: components["schemas"]["tag"][];
            shared?: components["schemas"]["sharedWorkflow"][];
        };
        workflowList: {
            data?: components["schemas"]["workflow"][];
            /**
             * @description Paginate through workflows by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
             * @example MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA
             */
            nextCursor?: string | null;
        };
        workflowTags: components["schemas"]["tag"][];
        tagIds: {
            /** @example 2tUt1wbLX592XDdX */
            id: string;
        }[];
        user: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            readonly id?: string;
            /**
             * Format: email
             * @example john.doe@company.com
             */
            email: string;
            /**
             * @description User's first name
             * @example john
             */
            readonly firstName?: string;
            /**
             * @description User's last name
             * @example Doe
             */
            readonly lastName?: string;
            /** @description Whether the user finished setting up their account in response to the invitation (true) or not (false). */
            readonly isPending?: boolean;
            /**
             * Format: date-time
             * @description Time the user was created.
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @description Last time the user was updated.
             */
            readonly updatedAt?: string;
            /** @example owner */
            readonly role?: string;
        };
        userList: {
            data?: components["schemas"]["user"][];
            /**
             * @description Paginate through users by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
             * @example MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA
             */
            nextCursor?: string | null;
        };
        pull: {
            /** @example true */
            force?: boolean;
            /**
             * @example {
             *       "foo": "bar"
             *     }
             */
            variables?: Record<string, never>;
        };
        importResult: {
            variables?: {
                added?: string[];
                changed?: string[];
            };
            credentials?: {
                id?: string;
                name?: string;
                type?: string;
            }[];
            workflows?: {
                id?: string;
                name?: string;
            }[];
            tags?: {
                tags?: {
                    id?: string;
                    name?: string;
                }[];
                mappings?: {
                    workflowId?: string;
                    tagId?: string;
                }[];
            };
        } & {
            [key: string]: unknown;
        };
        project: {
            readonly id?: string;
            name: string;
            readonly type?: string;
        };
        variable: {
            readonly id?: string;
            key: string;
            /** @example test */
            value: string;
            readonly type?: string;
            project?: components["schemas"]["project"];
        };
        variableList: {
            data?: components["schemas"]["variable"][];
            /**
             * @description Paginate through variables by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
             * @example MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA
             */
            nextCursor?: string | null;
        };
        "variable.create": {
            readonly id?: string;
            key: string;
            /** @example test */
            value: string;
            readonly type?: string;
            /** @example VmwOO9HeTEj20kxM */
            projectId?: string | null;
        };
        projectList: {
            data?: components["schemas"]["project"][];
            /**
             * @description Paginate through projects by setting the cursor parameter to a nextCursor attribute returned by a previous request. Default value fetches the first "page" of the collection.
             * @example MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA
             */
            nextCursor?: string | null;
        };
        error: {
            code?: string;
            message: string;
            description?: string;
        };
        role: {
            /** @example 1 */
            readonly id?: number;
            /** @example owner */
            readonly name?: string;
            /** @example global */
            readonly scope?: string;
            /**
             * Format: date-time
             * @description Time the role was created.
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @description Last time the role was updated.
             */
            readonly updatedAt?: string;
        };
        credentialType: {
            /** @example Email */
            readonly displayName?: string;
            /** @example email */
            readonly name?: string;
            /** @example string */
            readonly type?: string;
            /** @example string */
            readonly default?: string;
        };
        Error: components["schemas"]["error"];
        Role: components["schemas"]["role"];
        Execution: components["schemas"]["execution"];
        Node: components["schemas"]["node"];
        Tag: components["schemas"]["tag"];
        Workflow: components["schemas"]["workflow"];
        WorkflowSettings: components["schemas"]["workflowSettings"];
        ExecutionList: components["schemas"]["executionList"];
        WorkflowList: components["schemas"]["workflowList"];
        Credential: components["schemas"]["credential"];
        CredentialType: components["schemas"]["credentialType"];
        Audit: components["schemas"]["audit"];
        Pull: components["schemas"]["pull"];
        ImportResult: components["schemas"]["importResult"];
        UserList: components["schemas"]["userList"];
        User: components["schemas"]["user"];
    };
    responses: {
        /** @description Unauthorized */
        unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description The specified resource was not found. */
        notFound: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description The request is invalid or provides malformed data. */
        badRequest: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Conflict */
        conflict: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Forbidden */
        forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        /** @description The ID of the credential. */
        credentialId: string;
        /** @description Whether or not to include the execution's detailed data. */
        includeData: boolean;
        /** @description The maximum number of items to return. */
        limit: number;
        /** @description Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first "page" of the collection. See pagination for more detail. */
        cursor: string;
        /** @description The ID of the execution. */
        executionId: number;
        /** @description The ID of the tag. */
        tagId: string;
        /** @description The ID of the workflow. */
        workflowId: string;
        /** @description Whether to include the user's role or not. */
        includeRole: boolean;
        /** @description The ID or email of the user. */
        userIdentifier: string;
        /** @description The ID of the variable. */
        variableId: string;
        Cursor: string;
        Limit: string;
        ExecutionId: string;
        WorkflowId: string;
        TagId: string;
        IncludeData: string;
        UserIdentifier: string;
        IncludeRole: string;
        VariableId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    deleteCredential: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The credential ID that needs to be deleted */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Operation successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["credential"];
                };
            };
            401: components["responses"]["unauthorized"];
            404: components["responses"]["notFound"];
        };
    };
}
