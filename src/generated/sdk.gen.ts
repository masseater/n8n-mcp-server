// @ts-nocheck
// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteCredentialData, DeleteCredentialErrors, DeleteCredentialResponses, DeleteExecutionsByIdData, DeleteExecutionsByIdErrors, DeleteExecutionsByIdResponses, DeleteProjectsByProjectIdData, DeleteProjectsByProjectIdErrors, DeleteProjectsByProjectIdResponses, DeleteProjectsByProjectIdUsersByUserIdData, DeleteProjectsByProjectIdUsersByUserIdErrors, DeleteProjectsByProjectIdUsersByUserIdResponses, DeleteTagsByIdData, DeleteTagsByIdErrors, DeleteTagsByIdResponses, DeleteUsersByIdData, DeleteUsersByIdErrors, DeleteUsersByIdResponses, DeleteVariablesByIdData, DeleteVariablesByIdErrors, DeleteVariablesByIdResponses, DeleteWorkflowsByIdData, DeleteWorkflowsByIdErrors, DeleteWorkflowsByIdResponses, GetCredentialsSchemaByCredentialTypeNameData, GetCredentialsSchemaByCredentialTypeNameErrors, GetCredentialsSchemaByCredentialTypeNameResponses, GetExecutionsByIdData, GetExecutionsByIdErrors, GetExecutionsByIdResponses, GetExecutionsData, GetExecutionsErrors, GetExecutionsResponses, GetProjectsData, GetProjectsErrors, GetProjectsResponses, GetTagsByIdData, GetTagsByIdErrors, GetTagsByIdResponses, GetTagsData, GetTagsErrors, GetTagsResponses, GetUsersByIdData, GetUsersByIdErrors, GetUsersByIdResponses, GetUsersData, GetUsersErrors, GetUsersResponses, GetVariablesData, GetVariablesErrors, GetVariablesResponses, GetWorkflowsByIdData, GetWorkflowsByIdErrors, GetWorkflowsByIdResponses, GetWorkflowsByIdTagsData, GetWorkflowsByIdTagsErrors, GetWorkflowsByIdTagsResponses, GetWorkflowsData, GetWorkflowsErrors, GetWorkflowsResponses, PatchProjectsByProjectIdUsersByUserIdData, PatchProjectsByProjectIdUsersByUserIdErrors, PatchProjectsByProjectIdUsersByUserIdResponses, PatchUsersByIdRoleData, PatchUsersByIdRoleErrors, PatchUsersByIdRoleResponses, PostAuditData, PostAuditErrors, PostAuditResponses, PostCredentialsData, PostCredentialsErrors, PostCredentialsResponses, PostExecutionsByIdRetryData, PostExecutionsByIdRetryErrors, PostExecutionsByIdRetryResponses, PostProjectsByProjectIdUsersData, PostProjectsByProjectIdUsersErrors, PostProjectsByProjectIdUsersResponses, PostProjectsData, PostProjectsErrors, PostProjectsResponses, PostSourceControlPullData, PostSourceControlPullErrors, PostSourceControlPullResponses, PostTagsData, PostTagsErrors, PostTagsResponses, PostUsersData, PostUsersErrors, PostUsersResponses, PostVariablesData, PostVariablesErrors, PostVariablesResponses, PostWorkflowsByIdActivateData, PostWorkflowsByIdActivateErrors, PostWorkflowsByIdActivateResponses, PostWorkflowsByIdDeactivateData, PostWorkflowsByIdDeactivateErrors, PostWorkflowsByIdDeactivateResponses, PostWorkflowsData, PostWorkflowsErrors, PostWorkflowsResponses, PutCredentialsByIdTransferData, PutCredentialsByIdTransferErrors, PutCredentialsByIdTransferResponses, PutProjectsByProjectIdData, PutProjectsByProjectIdErrors, PutProjectsByProjectIdResponses, PutTagsByIdData, PutTagsByIdErrors, PutTagsByIdResponses, PutVariablesByIdData, PutVariablesByIdErrors, PutVariablesByIdResponses, PutWorkflowsByIdData, PutWorkflowsByIdErrors, PutWorkflowsByIdResponses, PutWorkflowsByIdTagsData, PutWorkflowsByIdTagsErrors, PutWorkflowsByIdTagsResponses, PutWorkflowsByIdTransferData, PutWorkflowsByIdTransferErrors, PutWorkflowsByIdTransferResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Generate an audit
 *
 * Generate a security audit for your n8n instance.
 */
export const postAudit = <ThrowOnError extends boolean = false>(options?: Options<PostAuditData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuditResponses, PostAuditErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/audit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a credential
 *
 * Creates a credential that can be used by nodes of the specified type.
 */
export const postCredentials = <ThrowOnError extends boolean = false>(options: Options<PostCredentialsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostCredentialsResponses, PostCredentialsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete credential by ID
 *
 * Deletes a credential from your instance. You must be the owner of the credentials
 */
export const deleteCredential = <ThrowOnError extends boolean = false>(options: Options<DeleteCredentialData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCredentialResponses, DeleteCredentialErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials/{id}',
        ...options
    });
};

/**
 * Show credential data schema
 */
export const getCredentialsSchemaByCredentialTypeName = <ThrowOnError extends boolean = false>(options: Options<GetCredentialsSchemaByCredentialTypeNameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCredentialsSchemaByCredentialTypeNameResponses, GetCredentialsSchemaByCredentialTypeNameErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials/schema/{credentialTypeName}',
        ...options
    });
};

/**
 * Transfer a credential to another project.
 *
 * Transfer a credential to another project.
 */
export const putCredentialsByIdTransfer = <ThrowOnError extends boolean = false>(options: Options<PutCredentialsByIdTransferData, ThrowOnError>) => {
    return (options.client ?? client).put<PutCredentialsByIdTransferResponses, PutCredentialsByIdTransferErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/credentials/{id}/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve all executions
 *
 * Retrieve all executions from your instance.
 */
export const getExecutions = <ThrowOnError extends boolean = false>(options?: Options<GetExecutionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetExecutionsResponses, GetExecutionsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/executions',
        ...options
    });
};

/**
 * Delete an execution
 *
 * Deletes an execution from your instance.
 */
export const deleteExecutionsById = <ThrowOnError extends boolean = false>(options: Options<DeleteExecutionsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteExecutionsByIdResponses, DeleteExecutionsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/executions/{id}',
        ...options
    });
};

/**
 * Retrieve an execution
 *
 * Retrieve an execution from your instance.
 */
export const getExecutionsById = <ThrowOnError extends boolean = false>(options: Options<GetExecutionsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetExecutionsByIdResponses, GetExecutionsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/executions/{id}',
        ...options
    });
};

/**
 * Retry an execution
 *
 * Retry an execution from your instance.
 */
export const postExecutionsByIdRetry = <ThrowOnError extends boolean = false>(options: Options<PostExecutionsByIdRetryData, ThrowOnError>) => {
    return (options.client ?? client).post<PostExecutionsByIdRetryResponses, PostExecutionsByIdRetryErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/executions/{id}/retry',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve all tags
 *
 * Retrieve all tags from your instance.
 */
export const getTags = <ThrowOnError extends boolean = false>(options?: Options<GetTagsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTagsResponses, GetTagsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags',
        ...options
    });
};

/**
 * Create a tag
 *
 * Create a tag in your instance.
 */
export const postTags = <ThrowOnError extends boolean = false>(options: Options<PostTagsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostTagsResponses, PostTagsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a tag
 *
 * Deletes a tag.
 */
export const deleteTagsById = <ThrowOnError extends boolean = false>(options: Options<DeleteTagsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTagsByIdResponses, DeleteTagsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options
    });
};

/**
 * Retrieves a tag
 *
 * Retrieves a tag.
 */
export const getTagsById = <ThrowOnError extends boolean = false>(options: Options<GetTagsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTagsByIdResponses, GetTagsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options
    });
};

/**
 * Update a tag
 *
 * Update a tag.
 */
export const putTagsById = <ThrowOnError extends boolean = false>(options: Options<PutTagsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutTagsByIdResponses, PutTagsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/tags/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve all workflows
 *
 * Retrieve all workflows from your instance.
 */
export const getWorkflows = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWorkflowsResponses, GetWorkflowsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows',
        ...options
    });
};

/**
 * Create a workflow
 *
 * Create a workflow in your instance.
 */
export const postWorkflows = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostWorkflowsResponses, PostWorkflowsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a workflow
 *
 * Deletes a workflow.
 */
export const deleteWorkflowsById = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkflowsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteWorkflowsByIdResponses, DeleteWorkflowsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}',
        ...options
    });
};

/**
 * Retrieves a workflow
 *
 * Retrieves a workflow.
 */
export const getWorkflowsById = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWorkflowsByIdResponses, GetWorkflowsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}',
        ...options
    });
};

/**
 * Update a workflow
 *
 * Update a workflow.
 */
export const putWorkflowsById = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutWorkflowsByIdResponses, PutWorkflowsByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate a workflow
 *
 * Active a workflow.
 */
export const postWorkflowsByIdActivate = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByIdActivateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostWorkflowsByIdActivateResponses, PostWorkflowsByIdActivateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/activate',
        ...options
    });
};

/**
 * Deactivate a workflow
 *
 * Deactivate a workflow.
 */
export const postWorkflowsByIdDeactivate = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByIdDeactivateData, ThrowOnError>) => {
    return (options.client ?? client).post<PostWorkflowsByIdDeactivateResponses, PostWorkflowsByIdDeactivateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/deactivate',
        ...options
    });
};

/**
 * Transfer a workflow to another project.
 *
 * Transfer a workflow to another project.
 */
export const putWorkflowsByIdTransfer = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowsByIdTransferData, ThrowOnError>) => {
    return (options.client ?? client).put<PutWorkflowsByIdTransferResponses, PutWorkflowsByIdTransferErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get workflow tags
 *
 * Get workflow tags.
 */
export const getWorkflowsByIdTags = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowsByIdTagsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWorkflowsByIdTagsResponses, GetWorkflowsByIdTagsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/tags',
        ...options
    });
};

/**
 * Update tags of a workflow
 *
 * Update tags of a workflow.
 */
export const putWorkflowsByIdTags = <ThrowOnError extends boolean = false>(options: Options<PutWorkflowsByIdTagsData, ThrowOnError>) => {
    return (options.client ?? client).put<PutWorkflowsByIdTagsResponses, PutWorkflowsByIdTagsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/workflows/{id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve all users
 *
 * Retrieve all users from your instance. Only available for the instance owner.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersResponses, GetUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create multiple users
 *
 * Create one or more users.
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUsersResponses, PostUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user
 *
 * Delete a user from your instance.
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUsersByIdResponses, DeleteUsersByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by ID/Email
 *
 * Retrieve a user from your instance. Only available for the instance owner.
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUsersByIdResponses, GetUsersByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Change a user's global role
 *
 * Change a user's global role
 */
export const patchUsersByIdRole = <ThrowOnError extends boolean = false>(options: Options<PatchUsersByIdRoleData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchUsersByIdRoleResponses, PatchUsersByIdRoleErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/users/{id}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Pull changes from the remote repository
 *
 * Requires the Source Control feature to be licensed and connected to a repository.
 */
export const postSourceControlPull = <ThrowOnError extends boolean = false>(options: Options<PostSourceControlPullData, ThrowOnError>) => {
    return (options.client ?? client).post<PostSourceControlPullResponses, PostSourceControlPullErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/source-control/pull',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve variables
 *
 * Retrieve variables from your instance.
 */
export const getVariables = <ThrowOnError extends boolean = false>(options?: Options<GetVariablesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVariablesResponses, GetVariablesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/variables',
        ...options
    });
};

/**
 * Create a variable
 *
 * Create a variable in your instance.
 */
export const postVariables = <ThrowOnError extends boolean = false>(options: Options<PostVariablesData, ThrowOnError>) => {
    return (options.client ?? client).post<PostVariablesResponses, PostVariablesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/variables',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a variable
 *
 * Delete a variable from your instance.
 */
export const deleteVariablesById = <ThrowOnError extends boolean = false>(options: Options<DeleteVariablesByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteVariablesByIdResponses, DeleteVariablesByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/variables/{id}',
        ...options
    });
};

/**
 * Update a variable
 *
 * Update a variable from your instance.
 */
export const putVariablesById = <ThrowOnError extends boolean = false>(options: Options<PutVariablesByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutVariablesByIdResponses, PutVariablesByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/variables/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve projects
 *
 * Retrieve projects from your instance.
 */
export const getProjects = <ThrowOnError extends boolean = false>(options?: Options<GetProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectsResponses, GetProjectsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options
    });
};

/**
 * Create a project
 *
 * Create a project on your instance.
 */
export const postProjects = <ThrowOnError extends boolean = false>(options: Options<PostProjectsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostProjectsResponses, PostProjectsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a project
 *
 * Delete a project from your instance.
 */
export const deleteProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectsByProjectIdResponses, DeleteProjectsByProjectIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Update a project
 *
 * Update a project on your instance.
 */
export const putProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<PutProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutProjectsByProjectIdResponses, PutProjectsByProjectIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add one or more users to a project
 *
 * Add one or more users to a project on your instance.
 */
export const postProjectsByProjectIdUsers = <ThrowOnError extends boolean = false>(options: Options<PostProjectsByProjectIdUsersData, ThrowOnError>) => {
    return (options.client ?? client).post<PostProjectsByProjectIdUsersResponses, PostProjectsByProjectIdUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user from a project
 *
 * Delete a user from a project on your instance.
 */
export const deleteProjectsByProjectIdUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectsByProjectIdUsersByUserIdResponses, DeleteProjectsByProjectIdUsersByUserIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/users/{userId}',
        ...options
    });
};

/**
 * Change a user's role in a project
 *
 * Change a user's role in a project.
 */
export const patchProjectsByProjectIdUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<PatchProjectsByProjectIdUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchProjectsByProjectIdUsersByUserIdResponses, PatchProjectsByProjectIdUsersByUserIdErrors, ThrowOnError>({
        security: [
            {
                name: 'X-N8N-API-KEY',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
